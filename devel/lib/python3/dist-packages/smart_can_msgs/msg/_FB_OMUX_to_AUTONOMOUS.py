# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smart_can_msgs/FB_OMUX_to_AUTONOMOUS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FB_OMUX_to_AUTONOMOUS(genpy.Message):
  _md5sum = "7068cf9bccd4d4797668be13f6b90cbb"
  _type = "smart_can_msgs/FB_OMUX_to_AUTONOMOUS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 FB_EMERGENCY
uint8 FB_ReverseLight
uint8 FB_RightSignal
uint8 FB_WindowResistance
uint8 FB_LeftSignal
uint8 FB_InteriorLight
uint8 FB_DRL
uint8 FB_DoorKeyStatus
uint8 FB_BrakeLight
uint8 FB_BatteryVoltage
uint8 FB_ChargeInput
uint8 FB_HighBeam
uint8 FB_LowBeam
uint8 FB_IGNITION
uint8 FB_HazardousLight
uint8 FB_VehicleStatus
uint8 FB_LeftDoorStatus
uint8 FB_RightDoorStatus
uint8 FB_BatterySOC
uint8 FB_ErrorPowerTrain
uint8 FB_ErrorBattery
uint8 FB_BrakePedal_Voltage_EN"""
  __slots__ = ['FB_EMERGENCY','FB_ReverseLight','FB_RightSignal','FB_WindowResistance','FB_LeftSignal','FB_InteriorLight','FB_DRL','FB_DoorKeyStatus','FB_BrakeLight','FB_BatteryVoltage','FB_ChargeInput','FB_HighBeam','FB_LowBeam','FB_IGNITION','FB_HazardousLight','FB_VehicleStatus','FB_LeftDoorStatus','FB_RightDoorStatus','FB_BatterySOC','FB_ErrorPowerTrain','FB_ErrorBattery','FB_BrakePedal_Voltage_EN']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FB_EMERGENCY,FB_ReverseLight,FB_RightSignal,FB_WindowResistance,FB_LeftSignal,FB_InteriorLight,FB_DRL,FB_DoorKeyStatus,FB_BrakeLight,FB_BatteryVoltage,FB_ChargeInput,FB_HighBeam,FB_LowBeam,FB_IGNITION,FB_HazardousLight,FB_VehicleStatus,FB_LeftDoorStatus,FB_RightDoorStatus,FB_BatterySOC,FB_ErrorPowerTrain,FB_ErrorBattery,FB_BrakePedal_Voltage_EN

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FB_OMUX_to_AUTONOMOUS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FB_EMERGENCY is None:
        self.FB_EMERGENCY = 0
      if self.FB_ReverseLight is None:
        self.FB_ReverseLight = 0
      if self.FB_RightSignal is None:
        self.FB_RightSignal = 0
      if self.FB_WindowResistance is None:
        self.FB_WindowResistance = 0
      if self.FB_LeftSignal is None:
        self.FB_LeftSignal = 0
      if self.FB_InteriorLight is None:
        self.FB_InteriorLight = 0
      if self.FB_DRL is None:
        self.FB_DRL = 0
      if self.FB_DoorKeyStatus is None:
        self.FB_DoorKeyStatus = 0
      if self.FB_BrakeLight is None:
        self.FB_BrakeLight = 0
      if self.FB_BatteryVoltage is None:
        self.FB_BatteryVoltage = 0
      if self.FB_ChargeInput is None:
        self.FB_ChargeInput = 0
      if self.FB_HighBeam is None:
        self.FB_HighBeam = 0
      if self.FB_LowBeam is None:
        self.FB_LowBeam = 0
      if self.FB_IGNITION is None:
        self.FB_IGNITION = 0
      if self.FB_HazardousLight is None:
        self.FB_HazardousLight = 0
      if self.FB_VehicleStatus is None:
        self.FB_VehicleStatus = 0
      if self.FB_LeftDoorStatus is None:
        self.FB_LeftDoorStatus = 0
      if self.FB_RightDoorStatus is None:
        self.FB_RightDoorStatus = 0
      if self.FB_BatterySOC is None:
        self.FB_BatterySOC = 0
      if self.FB_ErrorPowerTrain is None:
        self.FB_ErrorPowerTrain = 0
      if self.FB_ErrorBattery is None:
        self.FB_ErrorBattery = 0
      if self.FB_BrakePedal_Voltage_EN is None:
        self.FB_BrakePedal_Voltage_EN = 0
    else:
      self.FB_EMERGENCY = 0
      self.FB_ReverseLight = 0
      self.FB_RightSignal = 0
      self.FB_WindowResistance = 0
      self.FB_LeftSignal = 0
      self.FB_InteriorLight = 0
      self.FB_DRL = 0
      self.FB_DoorKeyStatus = 0
      self.FB_BrakeLight = 0
      self.FB_BatteryVoltage = 0
      self.FB_ChargeInput = 0
      self.FB_HighBeam = 0
      self.FB_LowBeam = 0
      self.FB_IGNITION = 0
      self.FB_HazardousLight = 0
      self.FB_VehicleStatus = 0
      self.FB_LeftDoorStatus = 0
      self.FB_RightDoorStatus = 0
      self.FB_BatterySOC = 0
      self.FB_ErrorPowerTrain = 0
      self.FB_ErrorBattery = 0
      self.FB_BrakePedal_Voltage_EN = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_22B().pack(_x.FB_EMERGENCY, _x.FB_ReverseLight, _x.FB_RightSignal, _x.FB_WindowResistance, _x.FB_LeftSignal, _x.FB_InteriorLight, _x.FB_DRL, _x.FB_DoorKeyStatus, _x.FB_BrakeLight, _x.FB_BatteryVoltage, _x.FB_ChargeInput, _x.FB_HighBeam, _x.FB_LowBeam, _x.FB_IGNITION, _x.FB_HazardousLight, _x.FB_VehicleStatus, _x.FB_LeftDoorStatus, _x.FB_RightDoorStatus, _x.FB_BatterySOC, _x.FB_ErrorPowerTrain, _x.FB_ErrorBattery, _x.FB_BrakePedal_Voltage_EN))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.FB_EMERGENCY, _x.FB_ReverseLight, _x.FB_RightSignal, _x.FB_WindowResistance, _x.FB_LeftSignal, _x.FB_InteriorLight, _x.FB_DRL, _x.FB_DoorKeyStatus, _x.FB_BrakeLight, _x.FB_BatteryVoltage, _x.FB_ChargeInput, _x.FB_HighBeam, _x.FB_LowBeam, _x.FB_IGNITION, _x.FB_HazardousLight, _x.FB_VehicleStatus, _x.FB_LeftDoorStatus, _x.FB_RightDoorStatus, _x.FB_BatterySOC, _x.FB_ErrorPowerTrain, _x.FB_ErrorBattery, _x.FB_BrakePedal_Voltage_EN,) = _get_struct_22B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_22B().pack(_x.FB_EMERGENCY, _x.FB_ReverseLight, _x.FB_RightSignal, _x.FB_WindowResistance, _x.FB_LeftSignal, _x.FB_InteriorLight, _x.FB_DRL, _x.FB_DoorKeyStatus, _x.FB_BrakeLight, _x.FB_BatteryVoltage, _x.FB_ChargeInput, _x.FB_HighBeam, _x.FB_LowBeam, _x.FB_IGNITION, _x.FB_HazardousLight, _x.FB_VehicleStatus, _x.FB_LeftDoorStatus, _x.FB_RightDoorStatus, _x.FB_BatterySOC, _x.FB_ErrorPowerTrain, _x.FB_ErrorBattery, _x.FB_BrakePedal_Voltage_EN))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.FB_EMERGENCY, _x.FB_ReverseLight, _x.FB_RightSignal, _x.FB_WindowResistance, _x.FB_LeftSignal, _x.FB_InteriorLight, _x.FB_DRL, _x.FB_DoorKeyStatus, _x.FB_BrakeLight, _x.FB_BatteryVoltage, _x.FB_ChargeInput, _x.FB_HighBeam, _x.FB_LowBeam, _x.FB_IGNITION, _x.FB_HazardousLight, _x.FB_VehicleStatus, _x.FB_LeftDoorStatus, _x.FB_RightDoorStatus, _x.FB_BatterySOC, _x.FB_ErrorPowerTrain, _x.FB_ErrorBattery, _x.FB_BrakePedal_Voltage_EN,) = _get_struct_22B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_22B = None
def _get_struct_22B():
    global _struct_22B
    if _struct_22B is None:
        _struct_22B = struct.Struct("<22B")
    return _struct_22B
