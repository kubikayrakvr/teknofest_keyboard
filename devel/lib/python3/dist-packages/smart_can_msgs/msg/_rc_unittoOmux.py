# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smart_can_msgs/rc_unittoOmux.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rc_unittoOmux(genpy.Message):
  _md5sum = "5a9878d79a5dbdeedaf385d69bb9ad39"
  _type = "smart_can_msgs/rc_unittoOmux"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 AUTONOMOUS_EMERGENCY
uint8 RC_WindowResintance
uint8 RC_InteriorLight
uint8 RC_ReverseLight
uint8 RC_DRL
uint8 RC_BrakeLight
int8 AUTONOMOUS_DOOR_OPEN
int8 AUTONOMOUS_DOOR_CLOSE
uint8 RC_SignalStatus
uint8 RC_LowBeam
uint8 RC_HighBeam
uint8 RC_SelectionGear
uint8 RC_Ignition"""
  __slots__ = ['AUTONOMOUS_EMERGENCY','RC_WindowResintance','RC_InteriorLight','RC_ReverseLight','RC_DRL','RC_BrakeLight','AUTONOMOUS_DOOR_OPEN','AUTONOMOUS_DOOR_CLOSE','RC_SignalStatus','RC_LowBeam','RC_HighBeam','RC_SelectionGear','RC_Ignition']
  _slot_types = ['int8','uint8','uint8','uint8','uint8','uint8','int8','int8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AUTONOMOUS_EMERGENCY,RC_WindowResintance,RC_InteriorLight,RC_ReverseLight,RC_DRL,RC_BrakeLight,AUTONOMOUS_DOOR_OPEN,AUTONOMOUS_DOOR_CLOSE,RC_SignalStatus,RC_LowBeam,RC_HighBeam,RC_SelectionGear,RC_Ignition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rc_unittoOmux, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AUTONOMOUS_EMERGENCY is None:
        self.AUTONOMOUS_EMERGENCY = 0
      if self.RC_WindowResintance is None:
        self.RC_WindowResintance = 0
      if self.RC_InteriorLight is None:
        self.RC_InteriorLight = 0
      if self.RC_ReverseLight is None:
        self.RC_ReverseLight = 0
      if self.RC_DRL is None:
        self.RC_DRL = 0
      if self.RC_BrakeLight is None:
        self.RC_BrakeLight = 0
      if self.AUTONOMOUS_DOOR_OPEN is None:
        self.AUTONOMOUS_DOOR_OPEN = 0
      if self.AUTONOMOUS_DOOR_CLOSE is None:
        self.AUTONOMOUS_DOOR_CLOSE = 0
      if self.RC_SignalStatus is None:
        self.RC_SignalStatus = 0
      if self.RC_LowBeam is None:
        self.RC_LowBeam = 0
      if self.RC_HighBeam is None:
        self.RC_HighBeam = 0
      if self.RC_SelectionGear is None:
        self.RC_SelectionGear = 0
      if self.RC_Ignition is None:
        self.RC_Ignition = 0
    else:
      self.AUTONOMOUS_EMERGENCY = 0
      self.RC_WindowResintance = 0
      self.RC_InteriorLight = 0
      self.RC_ReverseLight = 0
      self.RC_DRL = 0
      self.RC_BrakeLight = 0
      self.AUTONOMOUS_DOOR_OPEN = 0
      self.AUTONOMOUS_DOOR_CLOSE = 0
      self.RC_SignalStatus = 0
      self.RC_LowBeam = 0
      self.RC_HighBeam = 0
      self.RC_SelectionGear = 0
      self.RC_Ignition = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b5B2b5B().pack(_x.AUTONOMOUS_EMERGENCY, _x.RC_WindowResintance, _x.RC_InteriorLight, _x.RC_ReverseLight, _x.RC_DRL, _x.RC_BrakeLight, _x.AUTONOMOUS_DOOR_OPEN, _x.AUTONOMOUS_DOOR_CLOSE, _x.RC_SignalStatus, _x.RC_LowBeam, _x.RC_HighBeam, _x.RC_SelectionGear, _x.RC_Ignition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.AUTONOMOUS_EMERGENCY, _x.RC_WindowResintance, _x.RC_InteriorLight, _x.RC_ReverseLight, _x.RC_DRL, _x.RC_BrakeLight, _x.AUTONOMOUS_DOOR_OPEN, _x.AUTONOMOUS_DOOR_CLOSE, _x.RC_SignalStatus, _x.RC_LowBeam, _x.RC_HighBeam, _x.RC_SelectionGear, _x.RC_Ignition,) = _get_struct_b5B2b5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b5B2b5B().pack(_x.AUTONOMOUS_EMERGENCY, _x.RC_WindowResintance, _x.RC_InteriorLight, _x.RC_ReverseLight, _x.RC_DRL, _x.RC_BrakeLight, _x.AUTONOMOUS_DOOR_OPEN, _x.AUTONOMOUS_DOOR_CLOSE, _x.RC_SignalStatus, _x.RC_LowBeam, _x.RC_HighBeam, _x.RC_SelectionGear, _x.RC_Ignition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.AUTONOMOUS_EMERGENCY, _x.RC_WindowResintance, _x.RC_InteriorLight, _x.RC_ReverseLight, _x.RC_DRL, _x.RC_BrakeLight, _x.AUTONOMOUS_DOOR_OPEN, _x.AUTONOMOUS_DOOR_CLOSE, _x.RC_SignalStatus, _x.RC_LowBeam, _x.RC_HighBeam, _x.RC_SelectionGear, _x.RC_Ignition,) = _get_struct_b5B2b5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b5B2b5B = None
def _get_struct_b5B2b5B():
    global _struct_b5B2b5B
    if _struct_b5B2b5B is None:
        _struct_b5B2b5B = struct.Struct("<b5B2b5B")
    return _struct_b5B2b5B
