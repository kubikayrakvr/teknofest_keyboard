// Generated by gencpp from file ignition_telemetry_with/snd_RCUnit_HandBrakeData.msg
// DO NOT EDIT!


#ifndef IGNITION_TELEMETRY_WITH_MESSAGE_SND_RCUNIT_HANDBRAKEDATA_H
#define IGNITION_TELEMETRY_WITH_MESSAGE_SND_RCUNIT_HANDBRAKEDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ignition_telemetry_with
{
template <class ContainerAllocator>
struct snd_RCUnit_HandBrakeData_
{
  typedef snd_RCUnit_HandBrakeData_<ContainerAllocator> Type;

  snd_RCUnit_HandBrakeData_()
    : RC_HB_PwmValue(0)
    , RC_HandBrake_PRESS(0)
    , RC_HandBrake_FREE(0)
    , RC_HandBrakeData(0)  {
    }
  snd_RCUnit_HandBrakeData_(const ContainerAllocator& _alloc)
    : RC_HB_PwmValue(0)
    , RC_HandBrake_PRESS(0)
    , RC_HandBrake_FREE(0)
    , RC_HandBrakeData(0)  {
  (void)_alloc;
    }



   typedef uint16_t _RC_HB_PwmValue_type;
  _RC_HB_PwmValue_type RC_HB_PwmValue;

   typedef uint8_t _RC_HandBrake_PRESS_type;
  _RC_HandBrake_PRESS_type RC_HandBrake_PRESS;

   typedef uint8_t _RC_HandBrake_FREE_type;
  _RC_HandBrake_FREE_type RC_HandBrake_FREE;

   typedef uint8_t _RC_HandBrakeData_type;
  _RC_HandBrakeData_type RC_HandBrakeData;





  typedef boost::shared_ptr< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> const> ConstPtr;

}; // struct snd_RCUnit_HandBrakeData_

typedef ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<std::allocator<void> > snd_RCUnit_HandBrakeData;

typedef boost::shared_ptr< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData > snd_RCUnit_HandBrakeDataPtr;
typedef boost::shared_ptr< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData const> snd_RCUnit_HandBrakeDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator1> & lhs, const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator2> & rhs)
{
  return lhs.RC_HB_PwmValue == rhs.RC_HB_PwmValue &&
    lhs.RC_HandBrake_PRESS == rhs.RC_HandBrake_PRESS &&
    lhs.RC_HandBrake_FREE == rhs.RC_HandBrake_FREE &&
    lhs.RC_HandBrakeData == rhs.RC_HandBrakeData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator1> & lhs, const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ignition_telemetry_with

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "faee69d41fe0c8f41ca0166523232a9b";
  }

  static const char* value(const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfaee69d41fe0c8f4ULL;
  static const uint64_t static_value2 = 0x1ca0166523232a9bULL;
};

template<class ContainerAllocator>
struct DataType< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ignition_telemetry_with/snd_RCUnit_HandBrakeData";
  }

  static const char* value(const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 RC_HB_PwmValue\n"
"uint8 RC_HandBrake_PRESS\n"
"uint8 RC_HandBrake_FREE\n"
"uint8 RC_HandBrakeData\n"
;
  }

  static const char* value(const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RC_HB_PwmValue);
      stream.next(m.RC_HandBrake_PRESS);
      stream.next(m.RC_HandBrake_FREE);
      stream.next(m.RC_HandBrakeData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct snd_RCUnit_HandBrakeData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ignition_telemetry_with::snd_RCUnit_HandBrakeData_<ContainerAllocator>& v)
  {
    s << indent << "RC_HB_PwmValue: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RC_HB_PwmValue);
    s << indent << "RC_HandBrake_PRESS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_HandBrake_PRESS);
    s << indent << "RC_HandBrake_FREE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_HandBrake_FREE);
    s << indent << "RC_HandBrakeData: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_HandBrakeData);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IGNITION_TELEMETRY_WITH_MESSAGE_SND_RCUNIT_HANDBRAKEDATA_H
