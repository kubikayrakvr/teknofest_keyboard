// Generated by gencpp from file smart_can_msgs/AUTONOMOUS_BrakePedalControl.msg
// DO NOT EDIT!


#ifndef SMART_CAN_MSGS_MESSAGE_AUTONOMOUS_BRAKEPEDALCONTROL_H
#define SMART_CAN_MSGS_MESSAGE_AUTONOMOUS_BRAKEPEDALCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smart_can_msgs
{
template <class ContainerAllocator>
struct AUTONOMOUS_BrakePedalControl_
{
  typedef AUTONOMOUS_BrakePedalControl_<ContainerAllocator> Type;

  AUTONOMOUS_BrakePedalControl_()
    : AUTONOMOUS_BrakeMotor_Voltage(0)
    , AUTONOMOUS_BrakePedalMotor_PER(0)
    , AUTONOMOUS_BrakePedalMotor_ACC(0)
    , AUTONOMOUS_BrakePedalMotor_EN(0)  {
    }
  AUTONOMOUS_BrakePedalControl_(const ContainerAllocator& _alloc)
    : AUTONOMOUS_BrakeMotor_Voltage(0)
    , AUTONOMOUS_BrakePedalMotor_PER(0)
    , AUTONOMOUS_BrakePedalMotor_ACC(0)
    , AUTONOMOUS_BrakePedalMotor_EN(0)  {
  (void)_alloc;
    }



   typedef uint8_t _AUTONOMOUS_BrakeMotor_Voltage_type;
  _AUTONOMOUS_BrakeMotor_Voltage_type AUTONOMOUS_BrakeMotor_Voltage;

   typedef uint8_t _AUTONOMOUS_BrakePedalMotor_PER_type;
  _AUTONOMOUS_BrakePedalMotor_PER_type AUTONOMOUS_BrakePedalMotor_PER;

   typedef uint16_t _AUTONOMOUS_BrakePedalMotor_ACC_type;
  _AUTONOMOUS_BrakePedalMotor_ACC_type AUTONOMOUS_BrakePedalMotor_ACC;

   typedef uint8_t _AUTONOMOUS_BrakePedalMotor_EN_type;
  _AUTONOMOUS_BrakePedalMotor_EN_type AUTONOMOUS_BrakePedalMotor_EN;





  typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> const> ConstPtr;

}; // struct AUTONOMOUS_BrakePedalControl_

typedef ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<std::allocator<void> > AUTONOMOUS_BrakePedalControl;

typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl > AUTONOMOUS_BrakePedalControlPtr;
typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl const> AUTONOMOUS_BrakePedalControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator1> & lhs, const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator2> & rhs)
{
  return lhs.AUTONOMOUS_BrakeMotor_Voltage == rhs.AUTONOMOUS_BrakeMotor_Voltage &&
    lhs.AUTONOMOUS_BrakePedalMotor_PER == rhs.AUTONOMOUS_BrakePedalMotor_PER &&
    lhs.AUTONOMOUS_BrakePedalMotor_ACC == rhs.AUTONOMOUS_BrakePedalMotor_ACC &&
    lhs.AUTONOMOUS_BrakePedalMotor_EN == rhs.AUTONOMOUS_BrakePedalMotor_EN;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator1> & lhs, const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb8668963ba2b5c76295810f98dea37";
  }

  static const char* value(const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabb8668963ba2b5cULL;
  static const uint64_t static_value2 = 0x76295810f98dea37ULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_can_msgs/AUTONOMOUS_BrakePedalControl";
  }

  static const char* value(const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 AUTONOMOUS_BrakeMotor_Voltage\n"
"uint8 AUTONOMOUS_BrakePedalMotor_PER\n"
"uint16 AUTONOMOUS_BrakePedalMotor_ACC\n"
"uint8 AUTONOMOUS_BrakePedalMotor_EN\n"
;
  }

  static const char* value(const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.AUTONOMOUS_BrakeMotor_Voltage);
      stream.next(m.AUTONOMOUS_BrakePedalMotor_PER);
      stream.next(m.AUTONOMOUS_BrakePedalMotor_ACC);
      stream.next(m.AUTONOMOUS_BrakePedalMotor_EN);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AUTONOMOUS_BrakePedalControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_can_msgs::AUTONOMOUS_BrakePedalControl_<ContainerAllocator>& v)
  {
    s << indent << "AUTONOMOUS_BrakeMotor_Voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AUTONOMOUS_BrakeMotor_Voltage);
    s << indent << "AUTONOMOUS_BrakePedalMotor_PER: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AUTONOMOUS_BrakePedalMotor_PER);
    s << indent << "AUTONOMOUS_BrakePedalMotor_ACC: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.AUTONOMOUS_BrakePedalMotor_ACC);
    s << indent << "AUTONOMOUS_BrakePedalMotor_EN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AUTONOMOUS_BrakePedalMotor_EN);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CAN_MSGS_MESSAGE_AUTONOMOUS_BRAKEPEDALCONTROL_H
