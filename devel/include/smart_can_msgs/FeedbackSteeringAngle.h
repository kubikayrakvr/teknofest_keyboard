// Generated by gencpp from file smart_can_msgs/FeedbackSteeringAngle.msg
// DO NOT EDIT!


#ifndef SMART_CAN_MSGS_MESSAGE_FEEDBACKSTEERINGANGLE_H
#define SMART_CAN_MSGS_MESSAGE_FEEDBACKSTEERINGANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smart_can_msgs
{
template <class ContainerAllocator>
struct FeedbackSteeringAngle_
{
  typedef FeedbackSteeringAngle_<ContainerAllocator> Type;

  FeedbackSteeringAngle_()
    : FeedBackSteeringAngle(0)
    , FeedBackBrakepedalAngle(0)  {
    }
  FeedbackSteeringAngle_(const ContainerAllocator& _alloc)
    : FeedBackSteeringAngle(0)
    , FeedBackBrakepedalAngle(0)  {
  (void)_alloc;
    }



   typedef int8_t _FeedBackSteeringAngle_type;
  _FeedBackSteeringAngle_type FeedBackSteeringAngle;

   typedef uint8_t _FeedBackBrakepedalAngle_type;
  _FeedBackBrakepedalAngle_type FeedBackBrakepedalAngle;





  typedef boost::shared_ptr< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> const> ConstPtr;

}; // struct FeedbackSteeringAngle_

typedef ::smart_can_msgs::FeedbackSteeringAngle_<std::allocator<void> > FeedbackSteeringAngle;

typedef boost::shared_ptr< ::smart_can_msgs::FeedbackSteeringAngle > FeedbackSteeringAnglePtr;
typedef boost::shared_ptr< ::smart_can_msgs::FeedbackSteeringAngle const> FeedbackSteeringAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator1> & lhs, const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator2> & rhs)
{
  return lhs.FeedBackSteeringAngle == rhs.FeedBackSteeringAngle &&
    lhs.FeedBackBrakepedalAngle == rhs.FeedBackBrakepedalAngle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator1> & lhs, const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a68f18dfe701cae0f3f21fa7c5ac93df";
  }

  static const char* value(const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa68f18dfe701cae0ULL;
  static const uint64_t static_value2 = 0xf3f21fa7c5ac93dfULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_can_msgs/FeedbackSteeringAngle";
  }

  static const char* value(const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 FeedBackSteeringAngle\n"
"uint8 FeedBackBrakepedalAngle\n"
;
  }

  static const char* value(const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FeedBackSteeringAngle);
      stream.next(m.FeedBackBrakepedalAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeedbackSteeringAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_can_msgs::FeedbackSteeringAngle_<ContainerAllocator>& v)
  {
    s << indent << "FeedBackSteeringAngle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.FeedBackSteeringAngle);
    s << indent << "FeedBackBrakepedalAngle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FeedBackBrakepedalAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CAN_MSGS_MESSAGE_FEEDBACKSTEERINGANGLE_H
