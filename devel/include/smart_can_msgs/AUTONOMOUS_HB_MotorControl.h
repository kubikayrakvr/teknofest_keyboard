// Generated by gencpp from file smart_can_msgs/AUTONOMOUS_HB_MotorControl.msg
// DO NOT EDIT!


#ifndef SMART_CAN_MSGS_MESSAGE_AUTONOMOUS_HB_MOTORCONTROL_H
#define SMART_CAN_MSGS_MESSAGE_AUTONOMOUS_HB_MOTORCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smart_can_msgs
{
template <class ContainerAllocator>
struct AUTONOMOUS_HB_MotorControl_
{
  typedef AUTONOMOUS_HB_MotorControl_<ContainerAllocator> Type;

  AUTONOMOUS_HB_MotorControl_()
    : AUTONOMOUS_HB_Motor_PWM(0)
    , AUTONOMOUS_HB_MotState(0)
    , AUTONOMOUS_HB_MotEN(0)  {
    }
  AUTONOMOUS_HB_MotorControl_(const ContainerAllocator& _alloc)
    : AUTONOMOUS_HB_Motor_PWM(0)
    , AUTONOMOUS_HB_MotState(0)
    , AUTONOMOUS_HB_MotEN(0)  {
  (void)_alloc;
    }



   typedef uint8_t _AUTONOMOUS_HB_Motor_PWM_type;
  _AUTONOMOUS_HB_Motor_PWM_type AUTONOMOUS_HB_Motor_PWM;

   typedef uint8_t _AUTONOMOUS_HB_MotState_type;
  _AUTONOMOUS_HB_MotState_type AUTONOMOUS_HB_MotState;

   typedef uint8_t _AUTONOMOUS_HB_MotEN_type;
  _AUTONOMOUS_HB_MotEN_type AUTONOMOUS_HB_MotEN;





  typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> const> ConstPtr;

}; // struct AUTONOMOUS_HB_MotorControl_

typedef ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<std::allocator<void> > AUTONOMOUS_HB_MotorControl;

typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl > AUTONOMOUS_HB_MotorControlPtr;
typedef boost::shared_ptr< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl const> AUTONOMOUS_HB_MotorControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator1> & lhs, const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator2> & rhs)
{
  return lhs.AUTONOMOUS_HB_Motor_PWM == rhs.AUTONOMOUS_HB_Motor_PWM &&
    lhs.AUTONOMOUS_HB_MotState == rhs.AUTONOMOUS_HB_MotState &&
    lhs.AUTONOMOUS_HB_MotEN == rhs.AUTONOMOUS_HB_MotEN;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator1> & lhs, const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5bce3dd6587bd24ef1eee71abfb3adf7";
  }

  static const char* value(const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5bce3dd6587bd24eULL;
  static const uint64_t static_value2 = 0xf1eee71abfb3adf7ULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_can_msgs/AUTONOMOUS_HB_MotorControl";
  }

  static const char* value(const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 AUTONOMOUS_HB_Motor_PWM\n"
"uint8 AUTONOMOUS_HB_MotState\n"
"uint8 AUTONOMOUS_HB_MotEN\n"
;
  }

  static const char* value(const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.AUTONOMOUS_HB_Motor_PWM);
      stream.next(m.AUTONOMOUS_HB_MotState);
      stream.next(m.AUTONOMOUS_HB_MotEN);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AUTONOMOUS_HB_MotorControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_can_msgs::AUTONOMOUS_HB_MotorControl_<ContainerAllocator>& v)
  {
    s << indent << "AUTONOMOUS_HB_Motor_PWM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AUTONOMOUS_HB_Motor_PWM);
    s << indent << "AUTONOMOUS_HB_MotState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AUTONOMOUS_HB_MotState);
    s << indent << "AUTONOMOUS_HB_MotEN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AUTONOMOUS_HB_MotEN);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CAN_MSGS_MESSAGE_AUTONOMOUS_HB_MOTORCONTROL_H
