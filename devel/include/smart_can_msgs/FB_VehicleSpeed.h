// Generated by gencpp from file smart_can_msgs/FB_VehicleSpeed.msg
// DO NOT EDIT!


#ifndef SMART_CAN_MSGS_MESSAGE_FB_VEHICLESPEED_H
#define SMART_CAN_MSGS_MESSAGE_FB_VEHICLESPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smart_can_msgs
{
template <class ContainerAllocator>
struct FB_VehicleSpeed_
{
  typedef FB_VehicleSpeed_<ContainerAllocator> Type;

  FB_VehicleSpeed_()
    : FB_VehicleSpeed_KMh(0)
    , FB_ReelVehicleSpeed_KMh(0)
    , FB_ReelVehicleSpeed_Ms(0)  {
    }
  FB_VehicleSpeed_(const ContainerAllocator& _alloc)
    : FB_VehicleSpeed_KMh(0)
    , FB_ReelVehicleSpeed_KMh(0)
    , FB_ReelVehicleSpeed_Ms(0)  {
  (void)_alloc;
    }



   typedef uint8_t _FB_VehicleSpeed_KMh_type;
  _FB_VehicleSpeed_KMh_type FB_VehicleSpeed_KMh;

   typedef uint8_t _FB_ReelVehicleSpeed_KMh_type;
  _FB_ReelVehicleSpeed_KMh_type FB_ReelVehicleSpeed_KMh;

   typedef uint8_t _FB_ReelVehicleSpeed_Ms_type;
  _FB_ReelVehicleSpeed_Ms_type FB_ReelVehicleSpeed_Ms;





  typedef boost::shared_ptr< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct FB_VehicleSpeed_

typedef ::smart_can_msgs::FB_VehicleSpeed_<std::allocator<void> > FB_VehicleSpeed;

typedef boost::shared_ptr< ::smart_can_msgs::FB_VehicleSpeed > FB_VehicleSpeedPtr;
typedef boost::shared_ptr< ::smart_can_msgs::FB_VehicleSpeed const> FB_VehicleSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator1> & lhs, const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.FB_VehicleSpeed_KMh == rhs.FB_VehicleSpeed_KMh &&
    lhs.FB_ReelVehicleSpeed_KMh == rhs.FB_ReelVehicleSpeed_KMh &&
    lhs.FB_ReelVehicleSpeed_Ms == rhs.FB_ReelVehicleSpeed_Ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator1> & lhs, const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c33a97169dc1ce3d22f45b0581cd9f66";
  }

  static const char* value(const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc33a97169dc1ce3dULL;
  static const uint64_t static_value2 = 0x22f45b0581cd9f66ULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_can_msgs/FB_VehicleSpeed";
  }

  static const char* value(const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FB_VehicleSpeed_KMh\n"
"uint8 FB_ReelVehicleSpeed_KMh\n"
"uint8 FB_ReelVehicleSpeed_Ms\n"
;
  }

  static const char* value(const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FB_VehicleSpeed_KMh);
      stream.next(m.FB_ReelVehicleSpeed_KMh);
      stream.next(m.FB_ReelVehicleSpeed_Ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FB_VehicleSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_can_msgs::FB_VehicleSpeed_<ContainerAllocator>& v)
  {
    s << indent << "FB_VehicleSpeed_KMh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FB_VehicleSpeed_KMh);
    s << indent << "FB_ReelVehicleSpeed_KMh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FB_ReelVehicleSpeed_KMh);
    s << indent << "FB_ReelVehicleSpeed_Ms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FB_ReelVehicleSpeed_Ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CAN_MSGS_MESSAGE_FB_VEHICLESPEED_H
