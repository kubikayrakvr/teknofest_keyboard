// Generated by gencpp from file smart_can_msgs/rc_unittoOmux.msg
// DO NOT EDIT!


#ifndef SMART_CAN_MSGS_MESSAGE_RC_UNITTOOMUX_H
#define SMART_CAN_MSGS_MESSAGE_RC_UNITTOOMUX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smart_can_msgs
{
template <class ContainerAllocator>
struct rc_unittoOmux_
{
  typedef rc_unittoOmux_<ContainerAllocator> Type;

  rc_unittoOmux_()
    : AUTONOMOUS_EMERGENCY(0)
    , RC_WindowResintance(0)
    , RC_InteriorLight(0)
    , RC_ReverseLight(0)
    , RC_DRL(0)
    , RC_BrakeLight(0)
    , AUTONOMOUS_DOOR_OPEN(0)
    , AUTONOMOUS_DOOR_CLOSE(0)
    , RC_SignalStatus(0)
    , RC_LowBeam(0)
    , RC_HighBeam(0)
    , RC_SelectionGear(0)
    , RC_Ignition(0)  {
    }
  rc_unittoOmux_(const ContainerAllocator& _alloc)
    : AUTONOMOUS_EMERGENCY(0)
    , RC_WindowResintance(0)
    , RC_InteriorLight(0)
    , RC_ReverseLight(0)
    , RC_DRL(0)
    , RC_BrakeLight(0)
    , AUTONOMOUS_DOOR_OPEN(0)
    , AUTONOMOUS_DOOR_CLOSE(0)
    , RC_SignalStatus(0)
    , RC_LowBeam(0)
    , RC_HighBeam(0)
    , RC_SelectionGear(0)
    , RC_Ignition(0)  {
  (void)_alloc;
    }



   typedef int8_t _AUTONOMOUS_EMERGENCY_type;
  _AUTONOMOUS_EMERGENCY_type AUTONOMOUS_EMERGENCY;

   typedef uint8_t _RC_WindowResintance_type;
  _RC_WindowResintance_type RC_WindowResintance;

   typedef uint8_t _RC_InteriorLight_type;
  _RC_InteriorLight_type RC_InteriorLight;

   typedef uint8_t _RC_ReverseLight_type;
  _RC_ReverseLight_type RC_ReverseLight;

   typedef uint8_t _RC_DRL_type;
  _RC_DRL_type RC_DRL;

   typedef uint8_t _RC_BrakeLight_type;
  _RC_BrakeLight_type RC_BrakeLight;

   typedef int8_t _AUTONOMOUS_DOOR_OPEN_type;
  _AUTONOMOUS_DOOR_OPEN_type AUTONOMOUS_DOOR_OPEN;

   typedef int8_t _AUTONOMOUS_DOOR_CLOSE_type;
  _AUTONOMOUS_DOOR_CLOSE_type AUTONOMOUS_DOOR_CLOSE;

   typedef uint8_t _RC_SignalStatus_type;
  _RC_SignalStatus_type RC_SignalStatus;

   typedef uint8_t _RC_LowBeam_type;
  _RC_LowBeam_type RC_LowBeam;

   typedef uint8_t _RC_HighBeam_type;
  _RC_HighBeam_type RC_HighBeam;

   typedef uint8_t _RC_SelectionGear_type;
  _RC_SelectionGear_type RC_SelectionGear;

   typedef uint8_t _RC_Ignition_type;
  _RC_Ignition_type RC_Ignition;





  typedef boost::shared_ptr< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> const> ConstPtr;

}; // struct rc_unittoOmux_

typedef ::smart_can_msgs::rc_unittoOmux_<std::allocator<void> > rc_unittoOmux;

typedef boost::shared_ptr< ::smart_can_msgs::rc_unittoOmux > rc_unittoOmuxPtr;
typedef boost::shared_ptr< ::smart_can_msgs::rc_unittoOmux const> rc_unittoOmuxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator1> & lhs, const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator2> & rhs)
{
  return lhs.AUTONOMOUS_EMERGENCY == rhs.AUTONOMOUS_EMERGENCY &&
    lhs.RC_WindowResintance == rhs.RC_WindowResintance &&
    lhs.RC_InteriorLight == rhs.RC_InteriorLight &&
    lhs.RC_ReverseLight == rhs.RC_ReverseLight &&
    lhs.RC_DRL == rhs.RC_DRL &&
    lhs.RC_BrakeLight == rhs.RC_BrakeLight &&
    lhs.AUTONOMOUS_DOOR_OPEN == rhs.AUTONOMOUS_DOOR_OPEN &&
    lhs.AUTONOMOUS_DOOR_CLOSE == rhs.AUTONOMOUS_DOOR_CLOSE &&
    lhs.RC_SignalStatus == rhs.RC_SignalStatus &&
    lhs.RC_LowBeam == rhs.RC_LowBeam &&
    lhs.RC_HighBeam == rhs.RC_HighBeam &&
    lhs.RC_SelectionGear == rhs.RC_SelectionGear &&
    lhs.RC_Ignition == rhs.RC_Ignition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator1> & lhs, const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a9878d79a5dbdeedaf385d69bb9ad39";
  }

  static const char* value(const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a9878d79a5dbdeeULL;
  static const uint64_t static_value2 = 0xdaf385d69bb9ad39ULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_can_msgs/rc_unittoOmux";
  }

  static const char* value(const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 AUTONOMOUS_EMERGENCY\n"
"uint8 RC_WindowResintance\n"
"uint8 RC_InteriorLight\n"
"uint8 RC_ReverseLight\n"
"uint8 RC_DRL\n"
"uint8 RC_BrakeLight\n"
"int8 AUTONOMOUS_DOOR_OPEN\n"
"int8 AUTONOMOUS_DOOR_CLOSE\n"
"uint8 RC_SignalStatus\n"
"uint8 RC_LowBeam\n"
"uint8 RC_HighBeam\n"
"uint8 RC_SelectionGear\n"
"uint8 RC_Ignition\n"
;
  }

  static const char* value(const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.AUTONOMOUS_EMERGENCY);
      stream.next(m.RC_WindowResintance);
      stream.next(m.RC_InteriorLight);
      stream.next(m.RC_ReverseLight);
      stream.next(m.RC_DRL);
      stream.next(m.RC_BrakeLight);
      stream.next(m.AUTONOMOUS_DOOR_OPEN);
      stream.next(m.AUTONOMOUS_DOOR_CLOSE);
      stream.next(m.RC_SignalStatus);
      stream.next(m.RC_LowBeam);
      stream.next(m.RC_HighBeam);
      stream.next(m.RC_SelectionGear);
      stream.next(m.RC_Ignition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rc_unittoOmux_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_can_msgs::rc_unittoOmux_<ContainerAllocator>& v)
  {
    s << indent << "AUTONOMOUS_EMERGENCY: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AUTONOMOUS_EMERGENCY);
    s << indent << "RC_WindowResintance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_WindowResintance);
    s << indent << "RC_InteriorLight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_InteriorLight);
    s << indent << "RC_ReverseLight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_ReverseLight);
    s << indent << "RC_DRL: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_DRL);
    s << indent << "RC_BrakeLight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_BrakeLight);
    s << indent << "AUTONOMOUS_DOOR_OPEN: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AUTONOMOUS_DOOR_OPEN);
    s << indent << "AUTONOMOUS_DOOR_CLOSE: ";
    Printer<int8_t>::stream(s, indent + "  ", v.AUTONOMOUS_DOOR_CLOSE);
    s << indent << "RC_SignalStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_SignalStatus);
    s << indent << "RC_LowBeam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_LowBeam);
    s << indent << "RC_HighBeam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_HighBeam);
    s << indent << "RC_SelectionGear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_SelectionGear);
    s << indent << "RC_Ignition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RC_Ignition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CAN_MSGS_MESSAGE_RC_UNITTOOMUX_H
